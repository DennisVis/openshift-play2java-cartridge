#!/bin/bash

STOPTIMEOUT=10
FMT="%a %b %d %Y %H:%M:%S GMT%z (%Z)"
LOG_FILE="${OPENSHIFT_PLAY2LOG_DIR}logs/play.log"

function is_play_service_running() {
  if [ -f ${OPENSHIFT_REPO_DIR}RUNNING_PID ]; then
    play_pid=$( cat ${OPENSHIFT_REPO_DIR}RUNNING_PID 2> /dev/null )
    if `ps --pid $play_pid 2>&1`; then
      return 0
    fi
  fi

  return 1
}

function status() {
  if [ is_play_service_running ]; then
    client_result "Application is running"
  else
    client_result "Application is not running"
  fi
}

function load_config {

	# check needed vars
	if [[ -z $OPENSHIFT_REPO_DIR ]]; then
		echo "Error: OPENSHIFT_REPO_DIR not defined"
		return 1
	fi

	PLAY_PARAMS=""

	PLAY_CONFIG_FILE="${OPENSHIFT_REPO_DIR}conf/openshift.conf"

	if [[ -f $PLAY_CONFIG_FILE ]]; then

		function read_conf {
			local key=$1
			local default=$2
			local result=`grep "^$key[ |=]" $PLAY_CONFIG_FILE`

			# key not found
			if [[ -z "$result" ]]; then
				echo $default
			else
				result=`echo "$result" | grep -oP "=.*" | cut -b 1 --complement`
				echo $result
			fi
		}

		PLAY_PARAMS=$(read_conf "openshift.play.params" $PLAY_PARAMS)
	fi

	return 0
}

function start() {  

  # load $PLAY_PARAMS
	load_config

  if [[ ! $? -eq 0 ]]; then
	  exit $?
  fi
    	
	if [ -f ${OPENSHIFT_REPO_DIR}target/start ]; then		
		
		chmod +x ${OPENSHIFT_REPO_DIR}target/start

		echo "`date +"$FMT"`: Starting application '$OPENSHIFT_APP_NAME'..." >> "${LOG_FILE}"			

		APP_COMMAND="${OPENSHIFT_REPO_DIR}target/start $PLAY_PARAMS -Dhttp.port=${OPENSHIFT_PLAY2JAVA_PORT} -Dhttp.address=${OPENSHIFT_PLAY2JAVA_IP} -Dconfig.resource=openshift.conf"

		echo $APP_COMMAND &>> $LOG_FILE
		nohup bash -c "${APP_COMMAND} &>> ${LOG_FILE} 2>&1" &> /dev/null &
		
  else
    echo "WARN: Could not find the compiled application, will not start"
  fi
}

function kill_app {

	COMMAND="$1"

	# try 5 times to kill it
	for c in `seq 1 5`; do
	
		echo "Trying to kill proccess, attempt number $c" >> $LOG_FILE
		echo "$COMMAND" >> $LOG_FILE
		bash -c "$COMMAND &>> $LOG_FILE 2>&1" &> /dev/null
		sleep $c
		
		#killed it
		if [[ -z `ps -A | grep ' java$'` ]]; then
			if [ is_play_service_running ]; then
				rm ${OPENSHIFT_REPO_DIR}RUNNING_PID
			fi
		fi
	done
}

function stop() {

	pushd "$OPENSHIFT_REPO_DIR" > /dev/null

	#kill play if it was running
	if is_play_service_running; then

		play_pid=$( cat ${OPENSHIFT_REPO_DIR}RUNNING_PID 2> /dev/null )
		echo "Stopping play application" >> $LOG_FILE

		if [[ -n $play_pid ]]; then
			#try to kill it nicely
			kill_app "kill -SIGTERM $play_pid"
			#try to kill it harshly
			kill_app "kill -SIGKILL $play_pid"
		fi

		# If it survived, try to kill java
		if [[ -n `ps -A | grep java` ]]; then
			echo "Stopping java proccess" >> $LOG_FILE
			#try to kill it nicely
			kill_app "pkill -SIGTERM java"
			#try to kill it harshly
			kill_app "pkill -SIGKILL java"
		fi

		# Couldn't kill it
		if [[ -n `ps -A | grep java` ]]; then
			echo "Error: could not stop play application, error executing 'pkill java'. Use force-stop to kill."
			popd
	    exit 1
		fi
		
		popd > /dev/null
    exit 0
		
	else 
		echo "No application running..."
	fi

}

function restart() {
  stop
  start
}

function build() {  
  
  echo "`date +"$FMT"`: Building application '$OPENSHIFT_APP_NAME'..."
  
  # Make sure build process does not take more memory then allowed
  export _JAVA_OPTIONS="-Xms502m -Xmx502m"
    
  {   
    echo 
      (cd "${OPENSHIFT_REPO_DIR}"; play clean stage) 
  } >> "${LOG_FILE}"
}

function tidy() {
  client_message "Emptying log dir: $OPENSHIFT_PLAY2JAVA_LOG_DIR"
  shopt -s dotglob
  rm -rf ${OPENSHIFT_PLAY2JAVA_DIR}*
  rm -rf ${OPENSHIFT_PLAY2JAVA_DIR}tmp/*
}

#
#  main():
#

# Ensure arguments.
if ! [ $# -eq 1 ]; then
  echo "Usage: $0 [start|restart|graceful|graceful-stop|stop|status]"
  exit 1
fi

# Source utility functions.
source $OPENSHIFT_CARTRIDGE_SDK_BASH

# Handle commands.
case "$1" in
  start)                start       ;;
  restart|graceful)     restart     ;;
  graceful-stop|stop)   stop        ;;
  status)               status      ;;
  build)                build       ;;
  tidy)                 tidy        ;;
  *) exit 0;
esac

